# -*- coding: utf-8 -*-
"""DAP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7ebaCG-lyjslUwT3BFpT2C2AuZMbS9x
"""

import numpy as np
def add_matrices(matrix1, matrix2):
    # Check if the matrices have the same dimensions
    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
        print("Matrices must have the same dimensions for addition.")
        return None

    # Initialize a result matrix with zeros
    result_matrix = [[0 for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

    # Add corresponding elements of the two matrices
    for i in range(len(matrix1)):
        for j in range(len(matrix1[0])):
            result_matrix[i][j] = matrix1[i][j] + matrix2[i][j]

    return result_matrix

# Example matrices
matrix_a = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

matrix_b = [
    [9, 8, 7],
    [6, 5, 4],
    [3, 2, 1]
]

# Add the matrices
result = add_matrices(matrix_a, matrix_b)

# Display the result
if result:
    print("Matrix A:")
    for row in matrix_a:
        print(row)

    print("\nMatrix B:")
    for row in matrix_b:
        print(row)

    print("\nResultant Matrix:")
    for row in result:
        print(row)

import numpy as np
arr=np.array([1,2,3,4,5])
print(arr)
zeros_arr=np.zeros((3,3),dtype=int)
print(zeros_arr)
ones_arr=np.ones((2,2),dtype=int)
print(ones_arr)

arange_arr=np.arange(10)
print(arange_arr)

reshape_arr=arr.reshape(5,1)
print(reshape_arr)

a=np.array([1,2,3])
b=np.array([1,2,3])
print(a+b)

a1=np.array([1,2,3,4,5])
b1=np.array([1,2,3,4,5])
c=np.vstack(a1+b1)
print(c)

a=np.array([1,2,3,4,5,6])
b=np.split(a,2)
print(b)

a=np.array([[1,2,3,4],[5,6,7,8]])
b=a.T
print(b)

a=np.array([[2,3],[3,4]])
b=np.array([[5,6],[7,8]])
c=np.dot(a,b)
print(c)

import numpy as np
a=np.array([[2,4,6],[1,3,5]])
b=np.sum(a)
print(b)

a=np.array([1,2,3,4,5])
mean=np.mean(a)
median=np.median(a)
variance=np.var(a)
std=np.std(a)
print(mean)
print(median)
print(std)
print(variance)

9

data=np.loadtxt("/content/data.txt",dtype=int)
data=np.savetxt("/content/date.txt",data)
print(data)

import matplotlib.pyplot as plt
a=np.array([1,2,3,4])
plt.plot(a)

import pandas as pd
a=["Kalyan","Jwalitha","Abhi","Kiran","Likitha","Kumar","jittu"]
r=pd.Series(a,index=[34,22,64,83,29,53,45])
print(r)

import pandas as pd
df=pd.read_csv("/content/mnist_test.csv")
print(df)

import pandas as pd
df=pd.read_csv("/content/SPAM text message 20170820 - Data.csv")
print(df)

!pip install pandas
import pandas as pd
df = pd.read_table("/content/train.dat")
print(df)

import pandas as pd
df = pd.read_excel("/content/GDP.xlsx")
print(df)

import pandas as pd
df=pd.read_csv("/content/mnist_test.csv")
df.head()

import pandas as pd
df=pd.read_csv("/content/mnist_test.csv")
df.tail()

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas
import pandas as pd
df = pd.read_csv("/content/mnist_test.csv")
print(df.shape)

!pip install pandas
import pandas as pd
df = pd.read_csv

import numpy as np
import matplotlib.pyplot as plt
runs=np.array([100,50,91,78,89,25,34,19,9,10])
w=np.array([1,0,2,0,3,7,8,9,7,5])
plt.scatter(runs,w,color='orange')
plt.title('IndvsAus_score')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
tigar=np.linspace(-2*np.pi,2*np.pi,100)
print(tigar)
plt.plot(tigar,np.sin(tigar),color='blue')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
tigar=np.linspace(-np.pi,np.pi,100)
print(tigar)
plt.plot(tigar,np.sin(tigar),color='blue')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
tigar=np.linspace(-2*np.pi,2*np.pi,50)
print(tigar)
plt.plot(tigar,np.sin(tigar),color='blue')
plt.title("sin(x)")
plt.show()

import numpy as np
import matplotlib.pyplot as plt
overs=np.arange(5,50,5)
overs_a=np.arange(5,30,5)
runs_i=np.array([25,51,84,131,160,189,220,250,267])
runs_a=np.array([15,41,94,110,151])
wickets=np.array([12,32,96])
plt.subplot(2,1,2)
plt.plot(overs,runs_i,color='orange',label='India')
plt.subplot(2,1,1)
plt.plot(overs_a,runs_a,color='blue',label='Aus')
plt.legend(loc='best')
plt.show()

import matplotlib.pyplot as plt
a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='>',ms='15',mec='k')
plt.subplot(2,1,1)
plt.plot(years,profit_b,color='blue',linestyle='dotted',label='CompanyB',marker='H')
plt.show()

import matplotlib.pyplot as plt
a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='>',ms='15',mec='k')
plt.plot(years,profit_b,color='blue',linestyle='dotted',label='CompanyB',marker='H')
plt.show()

import matplotlib.pyplot as plt
a=[230,560,780,127,128]
b=[200,160,270,127,400]
years=[1,2,3,4]
profit_a=[(a[i]-a[i-1]) for i in range(1,len(a))]
profit_b=[(b[i]-b[i-1]) for i in range(1,len(b))]
plt.subplot(2,1,2)
plt.plot(years,profit_a,color='hotpink',linewidth='3',label='CompanyA',marker='>',ms='15',mec='m')
plt.subplot(2,1,1)
plt.plot(years,profit_b,color='blue',linestyle='dotted',label='CompanyB',marker='H')
plt.show()

a=np.array([25,60,5,10])
labe=["AIML","Python","Pandas","Numpy"]
plt.pie(a,labels=labe)
plt.show()

a=np.array([25,60,5,10])
labe=["AIML","Python","Pandas","Numpy"]
explo=[0.2,0,0,0]
plt.pie(a,labels=labe,explode=explo,startangle=180)
plt.show()

a=np.array([25,60,5,10])
labe=["AIML","Python","Pandas","Numpy"]
explo=[0.2,0,0,0]
plt.pie(a,labels=labe,explode=explo,startangle=180,colors=['orange','Purple','red','Green'])
plt.show()

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_excel("/content/city_temperature.csv")
data.to_csv("exmp.csv")
print(data)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
var1=pd.read_csv("/content/exmp.csv")
mean_val=var1['temperature(celsius)'].mean()
var1=var1.fillna(mean_val)
a=np.array(var1['temperature(celsius)'])
max_temp=np.max(a)
min_temp=np.min(a)
days=[a[i] for i in range(1, len(a)) if a[i]>mean_val]
date=np.array(var1['date'])
plt.plot(date,a,color='red',linewidth='2',label='Temperature recorded in a city for one month',marker='.',ms='10',mec='b')
plt.legend(loc='best')
print('Mean of temperatures is',mean_val)
print('Maximum temperature is',max_temp)
print('Minimum temperature is',min_temp)
print('Number of days where the temperature exceeded a certain threshold of',mean_val,'is',len(days),'days')
plt.show()

!pip install seaborn
import seaborn as sns
import matplotlib.pyplot as plt
tips=sns.load_dataset("tips")
sns.scatterplot(x="total_bill",y="tip",data=tips)
plt.title("Scatter plot of Total Bill vs.Tip")
plt.xlabel("Total Bill($)")
plt.ylabel("Tip($)")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
sns.scatterplot(x="total_bill",y="tip",data=tips)
plt.title("Scatter plot of Total Bill vs.Tip")
plt.xlabel("Total Bill($)")
plt.ylabel("Tip($)")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Load the anscombe dataset
anscombe = sns.load_dataset("anscombe")

# Display the first few rows of the dataset to understand its structure
print(anscombe.head())

# Plot the four datasets in the anscombe dataset
sns.set(style="ticks")
sns.lmplot(x="x", y="y", col="dataset", hue="dataset", data=anscombe,
           col_wrap=2, ci=None, palette="muted", height=4,
           scatter_kws={"s": 50, "alpha": 1})
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset("iris")
correlation_matrix=iris.corr()
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("Correlation Heatmap of Iris Dataset")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
dots= sns.load_dataset("dots")
correlation_matrix=dots.corr()
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title("Correlation Heatmap of dots Dataset")
plt.show()

